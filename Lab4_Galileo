/*
 * File: Galileo_Software.c
 * Author: Johnson Khath, Chaihath Wiyarand, Nampop Singsumpan
 * 
 * Created on September 19, 2014, 1:16 AM
 */

#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <time.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <pthread.h>
#include <curl/curl.h>
#include <errno.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>

#define Strobe (26) // IO8
#define GP_4 (28) // IO4
#define GP_5 (17) // IO5
#define GP_6 (24) // IO6
#define GP_7 (27) // IO7 GPIO27 corresponds to Arduino PIN7
#define GPIO_DIRECTION_IN (1)
#define GPIO_DIRECTION_OUT (0)
#define GPIO_STRONG (1)
#define GPIO_PULLUP (0)
#define ERROR (-1)

#define SELECT_GPIO_I2C (29) //Select between GPIO and I2C

#define RTC_SDA  (21) //A4
#define RTC_SCL  (20)  //A5

#define NUM_THREADS 20


char *STATUS;
int ADC[3];

/* thread id
*/
pthread_t tid[NUM_THREADS];


int fileHandleGPIO_4;
int fileHandleGPIO_5;
int fileHandleGPIO_6;
int fileHandleGPIO_7;
int fileHandleGPIO_S;

//utility functions
void delay(int milliseconds)
{
    long pause;
    clock_t now,then;

    pause = milliseconds*(CLOCKS_PER_SEC/1000);
    now = then = clock();
    while( (now-then) < pause )
        now = clock();
}

void decimal_to_binary(int decimal, char *bin_array)
{
	int k = 3;
	
	while (k >= 0){ 
		if (decimal >= pow(2, k)){ 
			bin_array[k] = '1'; 
			decimal = decimal - pow(2, k); 
			k--;
		}
		else{
			bin_array[k] = '0'; 
			k--;
		}
	}
}

int binary_to_decimal(char *bin_array)
{
	int j;
	int temp = 0;
	for (j = 0; j < 4; j++)
	{
		if (bin_array[j] == '1')
		{
			temp = temp + pow(2, j);
		}
	}
	
	return temp;

}

//***************************************************************

//open GPIO and set the direction
int openGPIO(int gpio, int direction, int drive )
{	
		char buffer[256]; 
		int fileHandle; 
		int fileMode;  

		//Export GPIO
		fileHandle = open("/sys/class/gpio/export", O_WRONLY); 
		if (ERROR == fileHandle) 
		{
			puts("Error: Unable to opening /sys/class/gpio/export");
			return(-1);
		}

		sprintf(buffer, "%d", gpio); 
		write(fileHandle, buffer, strlen(buffer)); 
		close(fileHandle); 

		//Direction GPIO
		sprintf(buffer, "/sys/class/gpio/gpio%d/direction", gpio); 
		fileHandle = open(buffer, O_WRONLY); 
		if (ERROR == fileHandle) 
		{
			puts("Unable to open file:");
			puts(buffer);
			return(-1);
		}

		if (direction == GPIO_DIRECTION_OUT) 
		{
			// Set out direction and strong drive
			write(fileHandle, "out", 3); 
			
			fileMode = O_WRONLY; 
			
		}
		else //GPIP port is input
		{
			// Set in direction
			write(fileHandle, "in", 2); //Write in to config file
		
			fileMode = O_RDONLY; //File is read only
			
		}
		close(fileHandle); //Close file
		
		//drive GPIO
	        sprintf(buffer, "/sys/class/gpio/gpio%d/drive", gpio);
	        fileHandle = open(buffer, O_WRONLY );
	        if(ERROR == fileHandle)
	        {
	               puts("Unable to open file:");
	               puts(buffer);
	               return(-1);
	        }
	 
	        if (drive == GPIO_STRONG)
	        {
	               // set strong
	               write(fileHandle, "strong", 6);
	               
	        }
	        else
	        {
	               // set pullup
	               write(fileHandle, "pullup", 6);
	               
	        }
			
		
			
	        close(fileHandle );
		


		//Open GPIO for Read / Write
		sprintf(buffer, "/sys/class/gpio/gpio%d/value", gpio); //Write file address to buffer
		fileHandle = open(buffer, fileMode); //Open file with specified access type
		if (ERROR == fileHandle) //Error handling if can't open file
		{
			puts("Unable to open file:");
			puts(buffer);
			return(-1);
		}

		return(fileHandle);  //Return int of creation status
}


void GPIO_IN(void)
{
	fileHandleGPIO_4 = openGPIO(GP_4, GPIO_DIRECTION_IN, GPIO_PULLUP );
	fileHandleGPIO_5 = openGPIO(GP_5, GPIO_DIRECTION_IN, GPIO_PULLUP);
	fileHandleGPIO_6 = openGPIO(GP_6, GPIO_DIRECTION_IN, GPIO_PULLUP);
	fileHandleGPIO_7 = openGPIO(GP_7, GPIO_DIRECTION_IN, GPIO_PULLUP);
	fileHandleGPIO_S = openGPIO(Strobe, GPIO_DIRECTION_OUT,GPIO_STRONG);
}

void GPIO_OUT(void)
{
	fileHandleGPIO_4 = openGPIO(GP_4, GPIO_DIRECTION_OUT,GPIO_STRONG);
	fileHandleGPIO_5 = openGPIO(GP_5, GPIO_DIRECTION_OUT,GPIO_STRONG);
	fileHandleGPIO_6 = openGPIO(GP_6, GPIO_DIRECTION_OUT,GPIO_STRONG);
	fileHandleGPIO_7 = openGPIO(GP_7, GPIO_DIRECTION_OUT,GPIO_STRONG);
	fileHandleGPIO_S = openGPIO(Strobe, GPIO_DIRECTION_OUT,GPIO_STRONG);
}

int closeGPIO(int gpio, int fileHandle)
{
	char buffer[256];
	close(fileHandle); //This is the file handle of opened GPIO for Read / Write earlier.
	fileHandle = open("/sys/class/gpio/unexport", O_WRONLY);

	if(ERROR == fileHandle)
	{
		puts("Unable to open file:");
		puts(buffer);
		return(-1);
	}
	
	sprintf(buffer, "%d", gpio);
	write(fileHandle, buffer, strlen(buffer));
	close(fileHandle);
	return(0);
}

char readGPIO(int fileHandle) 
{
	char bits_buffer[2]; 
	read(fileHandle, bits_buffer, 4); 
	
	return(bits_buffer[0]); 
}

int writeGPIO(int fileHandle, int val) 
{
	if (val == 0)
	{
		// Set GPIO low status
		write(fileHandle, "0", 1);
	}
	else
	{
		// Set GPIO high status
		write(fileHandle, "1", 1);
	}
	return(0);
}

void bus_write(int msg){ 

	GPIO_OUT();
	int i = 0;
	char bits_Buffer[4]; 
	
	//Strobe low PIC gets ready
	writeGPIO(fileHandleGPIO_S, 0); 

	decimal_to_binary(msg, bits_Buffer); 

	//Write to Data bus
	writeGPIO(fileHandleGPIO_4, (bits_Buffer[0] - '0')); 
	writeGPIO(fileHandleGPIO_5, (bits_Buffer[1] - '0'));
	writeGPIO(fileHandleGPIO_6, (bits_Buffer[2] - '0'));
	writeGPIO(fileHandleGPIO_7, (bits_Buffer[3] - '0')); 
	
	//Strobe High tell PIC all done writing
	writeGPIO(fileHandleGPIO_S, 1); 

	delay(10);
	
	//Strobe Low Operation complete
	writeGPIO(fileHandleGPIO_S, 0);

	//Reset Strobe
	writeGPIO(fileHandleGPIO_S, 1); 
}

int bus_read(){ 
	GPIO_IN();

	char bits_Buffer[4];
	int value = 0; 

	writeGPIO(fileHandleGPIO_S, 0); 

	//Read bus
	bits_Buffer[0] = readGPIO(fileHandleGPIO_4); 
	bits_Buffer[1] = readGPIO(fileHandleGPIO_5);
	bits_Buffer[2] = readGPIO(fileHandleGPIO_6);
	bits_Buffer[3] = readGPIO(fileHandleGPIO_7); 

	writeGPIO(fileHandleGPIO_S, 1);
	delay(10);
	writeGPIO(fileHandleGPIO_S, 0);
	delay(10);

	writeGPIO(fileHandleGPIO_S, 1);

	return binary_to_decimal(bits_Buffer);
}

void *sensor(void *cmd){
	if (cmd == "1"){//ping
		int PIC_Response = 0;

		bus_write(1);
		delay(10);
		PIC_Response = bus_read();

		//14 = E
		if (PIC_Response == 14)
		{
			STATUS = "PIC+PING";
			printf("Received PING Acknowledgement from PIC\n\n\n");
			//STATUS[0] = "PIC_PING_ACK";

		}
		else
		{
			printf("Error PING to PIC\n\n\n");
		}
		cmd == "5";

	}

	if (cmd == "2"){//get
		int i;
		int bit_nibble[4]; //4 bit nibble


		bus_write(2);
		delay(10);

		for (i = 0; i < 4; i++)
		{
			bit_nibble[i] = bus_read();
			delay(10);
		}
		printf("ADC value: ");
		STATUS = "ADC+OK";
		for (i = 0; i < 3; i++)
		{
			printf("%X", bit_nibble[i]);
			ADC[i] = bit_nibble[i];
			//strcat(ADC[i], bit_nibble[i]);
		}
		
		printf("\n");
		cmd == "5";
	}


	if (cmd == "0"){//reset
		int PIC_Response = 0;

		bus_write(0);
		delay(10);
		PIC_Response = bus_read();
		/* There will be a new fuction that will call bus_read or bus write
		*/


		if (PIC_Response == 14)
		{
			STATUS = "PIC+RESET";
			printf("Received RESET Acknowledgement from PIC\n\n\n");
		}
		else{
			printf("Error RESET to PIC\n\n\n");
		}
		cmd == "5";

	}
	
}

void MSG_PING(void)
{ 
	pthread_create(&tid[1], NULL, &sensor, "1");
	
}
//14 = E
void MSG_RESET(void)
{ 
	 pthread_create(&tid[3], NULL, &sensor, "0");
}

void MSG_GET(void){ 

	//call sensor
	pthread_create(&tid[2], NULL, &sensor, "2");

}

char bin2bcd(char binary_value){

  char temp;
  char retval;

  temp = binary_value;
  retval = 0;
  while(1){
    if(temp >= 10){
      temp -= 10;
      retval += 0x10;
    }else{
      retval += temp;
      break;
    }
  }
  return(retval);
}

char bcd2bin(char bcd_value){

  char temp;

  temp = bcd_value;
  temp >>= 1;
  temp &= 0x78;
  return(temp + (temp >> 2) + (bcd_value & 0x0f));
}

void i2cTime()
{

		int i;
        int r;
        int fd;
		int x;
        char command[2];
        char value[8];

        char *dev = "/dev/i2c-0";
        int addr = 0x68;
		
		fd = open(dev, O_RDWR );
        if(fd < 0)
        {
                perror("Opening i2c device node\n");
               // return 1;
        }
		
		r = ioctl(fd, I2C_SLAVE, addr);
        if(r < 0)
        {
                perror("Selecting i2c device\n");
        }
		
		char buff[4] = {0};
	    float data1;
		char number;
		
		
		command[0] = 0x00;
		if(write(fd, command, 1) != 1)
		{
			 perror("writing\n");
		}
		delay(200);
		
		for(i = 0; i < 8; i++)
			{
                x = read(fd, &value[i], 1);
                if(x != 1)
                    {
                        perror("reading i2c device\n");
                    }
                    delay(200);
			}  
				
				
                printf("System Time:%02X:%02X:%02X, Day:%X,  %X/%X/20%X\n", value[2],value[1],value[0],value[3],value[5],value[4], value[6]);
				
		
	close(fd);
}

void HTTP_GET(const char* url){
	CURL *curl;
	curl = curl_easy_init();
	if (curl) {
		curl_easy_setopt(curl, CURLOPT_URL, url);
		curl_easy_perform(curl);
		curl_easy_cleanup(curl);
		curl_easy_setopt(curl, CURLOPT_POSTFIELDS, url);
	}
}

void *serveItUp()
{
		/* Since this program depends on libcurl, you may need to
	* install libcurl4-gnutls-dev.
	*
	* On Linux Mint, this can be done by running:
	* sudo apt-get install libcurl4-gnutls-dev
	*/

	const char* hostname = "129.63.205.75";
	const int   port = 8000;
	const int   id = 6;
	const char* password = "jcn";
	const char* name = "IMBANANA";
	const int   adcval = ADC;
	const char* status = STATUS;
	const char* timestamp = "20141116-09:12:34";


	char buf[1024];
	snprintf(buf, 1024, "http://%s:%d/update?id=%d&password=%s&name=%s&data=%d&status=%s&timestamp=%s",
		hostname,
		port,
		id,
		password,
		name,
		adcval,
		status,
		timestamp);
	HTTP_GET(buf);
	
	//return 0;
}
// HTTP_GET INSIDE

void *command()
{
	int input;
	int i;
	int val = 1;

	while (val)
	{
		printf("0. RESET SENSOR\n");
		printf("1. PING SENSOR\n");
		printf("2. GET ADC VALUE\n");
		printf("3. Exit\n");
		printf("Selection: ");
		scanf("%d", &input);
		switch (input)
		{
		case 0:
			MSG_RESET(); //RESET COMMAND
			delay(1000);
			//STATUS = "PIC+RESET";
			//serveItUp();
			pthread_create(&tid[4], NULL, serveItUp, NULL);
			break;
		case 1:
			MSG_PING(); // PING COMMAND
			delay(1000);
			//serveItUp();
			pthread_create(&tid[4], NULL, serveItUp, NULL);
			break;	
		case 2:         //GET COMMAND
			MSG_GET();
			i2cTime();
			delay(1000);
			pthread_create(&tid[4], NULL, serveItUp, NULL);
			//serveItUp();
			break;
		case 3:
			printf("Thanks bye\n");
			val = 0;
			break;
		default:
			printf("Bad input, quitting!\n");
			break;
		}

	}
}

/*
Sensors control ()

- it passes in value of something....
- it will be determining what commands will be input.

- will be called in by msg_get or so on.....


*/


int main(void)
{
		int m = 0;

		int fileHandleGPIO_Select;
		fileHandleGPIO_Select = openGPIO(SELECT_GPIO_I2C, GPIO_DIRECTION_OUT, GPIO_STRONG);
		writeGPIO(fileHandleGPIO_Select, 0);  
		
		//Set strobe high
		int fileHandleGPIO_S;
		fileHandleGPIO_S = openGPIO(Strobe, GPIO_DIRECTION_OUT, GPIO_STRONG);
		writeGPIO(fileHandleGPIO_S, 1); 
		
		serveItUp();
		/*Semaphore starter
		*/
		
		
		/*=========================================
		this is where i left off:

		- mutex has to be init in different fuctions
		- so is semaphore

		there will be command-thread and other instructions running, so we might need either just mutex or mutex with semaphore

		===========================================
		*/


		/*Creating this user command thread
		*/
		pthread_create(&tid[0], NULL, &command, NULL);

		/*Waiting for command thread to finsih*/
		//for (m = 0; m <= NUM_THREADS; m++){
		pthread_join(tid[0], NULL);
		//}
		
		return 0;
}
