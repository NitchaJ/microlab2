/*
 * File: main.c
 * Author: Johnson Khath, Chaihath Wiyarand, Nampop Singsumpan
 *
 * Created on September 19, 2014, 1:16 AM
 */
#include <stdio.h>
#include <stdlib.h>
#include <pic16f688.h>
#include <stdbool.h>
//initialize ADC

//Initialize ADC
/*
STROBE RA2// FOR US IS RA4
D0 RC2
D1 RC3
D2 RC4
D3 RC5
 */
/* Sensor Device Responses */
#define MSG_ACK 0xE /* acknowledgement to the commands */
#define MSG_NOTHING 0xF /* reserved */
#define hi 1 // clock hi
#define lo 0 // clock lo

void adc_init() {
    //1.turn off comparators
    //2.select pin as analog input
    //3.set A/D control registers
    CMCON0 = 0x07; //CMCON Turn OFF comparators
    ANSEL = 0b00000100; // ANSEL Analog Select RA2/AN2 as analog input 0=digital and 1 = analog
    ADCON0 = 0b00001000; // Analog channel select 010=AN2 read analog signal from here
    TRISA = 0b00010100; // SET RA4 and RA2 as digital input adn the rest is output
    TRISC = 0b00111101; // Set RC2-5 as digital input and the rest is output
    ADCON1 = 0b10000001; // Implement A/D, 000 = FOSC/2
    ADON = 1; //ADC bit enabled
    //PORTA = 0b00000000;
    //   PORTCbits.RC0 = 1;
    PORTC = 0b00000001;
}
//read ADC value

unsigned int receive_msg() {
    // set_receive();// already been done
    unsigned int strobe_status = 0;
    strobe_status = PORTCbits.RC0;
    // while(STROBE == hi);
    // while(STROBE == lo);
    // while(STROBE == hi){
    // //read the data
    // }
    // for(i= 0; i<4;i++){
    // while(STROBE == lo);
    // while(STROBE == hi){
    // //read
    // }
    // }
    // 3.read the data
    // 4.wait strobe high
    // 5.return the data
    return strobe_status;
}

unsigned int adc_read(void) {
    /*
    1.set ADC status bit to start a cycle and wait until the process is completed
    2.clear ADC interrupt flag bit
     */
    unsigned int adcValue; //used to store ADC value as integer
    unsigned int temp; //temporary
    temp = 0; //initialize
    GO = 1; //Start ADC conversion cycle
    while (GO); //wait for conversion to be finished
    temp = (unsigned int) ADRESH; //Grab bits from Results Register High
    adcValue = temp << 8; //Shift it up by 8 Bits
    adcValue += (unsigned int) ADRESL; //add bits from Lower Results Register
    return adcValue;
}
//Convert the bits into a voltage value for easier LED ON OFF determination

unsigned int conv_adc2volt(void) {
    //5V reference 10 bits = 1024 steps
    unsigned int voltage;
    voltage = adc_read() / 1023;
    return voltage;
}

void ACK(void) {
    PORTCbits.RC2 = 0;
    PORTCbits.RC3 = 1;
    PORTCbits.RC4 = 1;
    PORTCbits.RC5 = 1;
}

int main(int argc, char** argv) {
    adc_init(); //Initial The adc function
    unsigned int STROBE = 0;
    unsigned int PING = 0;
    unsigned int READ = 0;
    unsigned int RESET = 0;
    while (1) {

        PING = 0;
        READ = 0;
        RESET = 0;
        STROBE = receive_msg();
        while(STROBE == hi)
        {
             if (conv_adc2volt() > 42) //Voltage value ex 42 = 4.2 volts
        {

            PORTCbits.RC1 = 1; //LED ON @ RC1

        } else {

            PORTCbits.RC1 = 0; //LED OFF @ RC1

        }
            
        }
        
        if (STROBE == lo) {
            PORTCbits.RC1 = 1; //LED ON
        }
            //   while (STROBE == hi);
            while (STROBE == lo); //wait
            while (STROBE == hi) {// read
                if (PORTCbits.RC5 == 0 && PORTCbits.RC4 == 0 && PORTCbits.RC3 == 0 && PORTCbits.RC2 == 0) {
                    /*
                     * ---------R E S E T------------
                     */
                    RESET = 1;
                    adc_init();
                }
                if (PORTCbits.RC5 == 0 && PORTCbits.RC4 == 0 && PORTCbits.RC3 == 0 && PORTCbits.RC2 == 1) {
                    /*
                     * --------- P I N G------------
                     */
                    PING = 1;
                }
                if (PORTCbits.RC5 == 0 && PORTCbits.RC4 == 0 && PORTCbits.RC3 == 1 && PORTCbits.RC2 == 0) {
                    //R E A D adc value
                    READ = 1;
                    adc_read();

                    //return adc value to
                }
            }
            while (STROBE == lo) {//write back

                if (PING == 1) {
                    TRISC = 0b00000000; // RC is output
                    ACK();

                }
                if (READ == 1) {
                    ACK();
                }
                if (RESET == 1) {
                    ACK();
                }
            }
            while (STROBE == hi);// wait


            TRISC = 0b00111101; //back to normal
        

    }

    return (EXIT_SUCCESS);
}
